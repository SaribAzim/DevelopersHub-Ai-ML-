# -*- coding: utf-8 -*-
"""Task 3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TyKJJMGD8fhKkYirylRJYo82p4mQZEhz
"""

# ===========================
# Deep Learning for Medical Image Classification
# ===========================

import os
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.optimizers import Adam
from sklearn.metrics import roc_curve, auc
from PIL import ImageFile
ImageFile.LOAD_TRUNCATED_IMAGES = True


# ===========================
# 1. Skin Cancer Detection (ResNet50 Transfer Learning)
# ===========================

# Dataset structure:
# skin_cancer/
#    benign/
#    malignant/

skin_dir = "/content/drive/MyDrive/Skin cancer ISIC The International Skin Imaging Collaboration"  # replace with your path
img_size = (128, 128)
batch_size = 32

skin_gen = ImageDataGenerator(rescale=1./255, validation_split=0.2)

train_skin = skin_gen.flow_from_directory(
    skin_dir,
    target_size=img_size,
    batch_size=batch_size,
    class_mode='binary',
    subset='training',
    shuffle=True
)

val_skin = skin_gen.flow_from_directory(
    skin_dir,
    target_size=img_size,
    batch_size=batch_size,
    class_mode='binary',
    subset='validation',
    shuffle=False
)

# Transfer Learning with ResNet50
resnet_base = ResNet50(weights='imagenet', include_top=False, input_shape=(128,128,3))
resnet_base.trainable = False  # freeze base layers

skin_model = Sequential([
    resnet_base,
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(1, activation='sigmoid')
])

skin_model.compile(optimizer=Adam(1e-4), loss='binary_crossentropy', metrics=['accuracy'])
skin_model.summary()

history_skin = skin_model.fit(
    train_skin,
    validation_data=val_skin,
    epochs=10
)

# Plot Skin Cancer results
plt.figure(figsize=(12,5))
plt.subplot(1,2,1)
plt.plot(history_skin.history['accuracy'], label='Train Acc')
plt.plot(history_skin.history['val_accuracy'], label='Val Acc')
plt.title('Skin Cancer Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()

plt.subplot(1,2,2)
plt.plot(history_skin.history['loss'], label='Train Loss')
plt.plot(history_skin.history['val_loss'], label='Val Loss')
plt.title('Skin Cancer Model Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()

# ===========================
# 2. Pneumonia Detection (Simple CNN)
# ===========================

img_size = (128, 128)
batch_size = 32

# Directories for pneumonia dataset
train_dir = "/content/drive/MyDrive/train"
test_dir = "/content/drive/MyDrive/test"

# Generators
train_gen = ImageDataGenerator(rescale=1./255)
train_pneu = train_gen.flow_from_directory(
    train_dir,
    target_size=img_size,
    batch_size=batch_size,
    class_mode='binary',
    shuffle=True
)

test_gen = ImageDataGenerator(rescale=1./255)
val_pneu = test_gen.flow_from_directory(
    test_dir,
    target_size=img_size,
    batch_size=batch_size,
    class_mode='binary',
    shuffle=False
)

# Simple CNN
pneu_model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(128,128,3)),
    MaxPooling2D((2,2)),
    Conv2D(64, (3,3), activation='relu'),
    MaxPooling2D((2,2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(1, activation='sigmoid')
])

pneu_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
pneu_model.summary()

# Train Pneumonia CNN
history_pneu = pneu_model.fit(
    train_pneu,
    validation_data=val_pneu,
    epochs=10
)